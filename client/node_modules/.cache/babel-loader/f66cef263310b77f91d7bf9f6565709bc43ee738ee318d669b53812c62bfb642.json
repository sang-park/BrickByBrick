{"ast":null,"code":"import { StatType } from \"../types/enums\";\nconst getDefaultStats = () => {\n  return {\n    [StatType.twoPointsMade]: 0,\n    [StatType.twoPointsMissed]: 0,\n    [StatType.threePointsMade]: 0,\n    [StatType.threePointsMissed]: 0,\n    [StatType.oRebounds]: 0,\n    [StatType.dRebounds]: 0,\n    [StatType.assists]: 0,\n    [StatType.steals]: 0,\n    [StatType.blocks]: 0,\n    [StatType.turnovers]: 0\n  };\n};\nconst playerOne = {\n  id: 1,\n  name: \"Sang\",\n  number: \"13\",\n  stats: getDefaultStats()\n};\nconst playerTwo = {\n  id: 2,\n  name: \"Kenny\",\n  number: \"0\",\n  stats: getDefaultStats()\n};\nconst playerThree = {\n  id: 3,\n  name: \"Bryce\",\n  number: \"11\",\n  stats: getDefaultStats()\n};\nconst playerFour = {\n  id: 4,\n  name: \"Jeff\",\n  number: \"25\",\n  stats: getDefaultStats()\n};\nconst playerFive = {\n  id: 5,\n  name: \"Andrew\",\n  number: \"7\",\n  stats: getDefaultStats()\n};\nconst playerSix = {\n  id: 6,\n  name: \"Rodell\",\n  number: \"15\",\n  stats: getDefaultStats()\n};\nconst playerSeven = {\n  id: 7,\n  name: \"Mike\",\n  number: \"23\",\n  stats: getDefaultStats()\n};\nconst playerEight = {\n  id: 8,\n  name: \"Max\",\n  number: \"16\",\n  stats: getDefaultStats()\n};\nconst playerNine = {\n  id: 9,\n  name: \"Timmy\",\n  number: \"1\",\n  stats: getDefaultStats()\n};\nconst playerTen = {\n  id: 10,\n  name: \"Kevin\",\n  number: \"00\",\n  stats: getDefaultStats()\n};\nconst randomStats = [];\n\n// playerId, statType, time\nfor (let i = 1; i < 11; i++) {\n  for (let type of Object.values(StatType)) {\n    const rand = Math.round(Math.random() * 6);\n    for (let j = 0; j < rand; j++) {\n      let newStat = {\n        playerId: i,\n        statType: type,\n        time: Math.round(Math.random() * 300)\n      };\n      randomStats.push(newStat);\n    }\n  }\n}\nconst mockPlayers = [playerOne, playerTwo, playerThree, playerFour, playerFive, playerSix, playerSeven, playerEight, playerNine, playerTen];\nconst playerMap = {};\nfor (let player of mockPlayers) {\n  playerMap[player.id] = player;\n}\nfor (let stat of randomStats) {\n  let curVal = playerMap[stat.playerId].stats[stat.statType] || 0;\n  playerMap[stat.playerId].stats[stat.statType] = curVal + 1;\n}\nexport { mockPlayers };","map":{"version":3,"names":["StatType","getDefaultStats","twoPointsMade","twoPointsMissed","threePointsMade","threePointsMissed","oRebounds","dRebounds","assists","steals","blocks","turnovers","playerOne","id","name","number","stats","playerTwo","playerThree","playerFour","playerFive","playerSix","playerSeven","playerEight","playerNine","playerTen","randomStats","i","type","Object","values","rand","Math","round","random","j","newStat","playerId","statType","time","push","mockPlayers","playerMap","player","stat","curVal"],"sources":["/Users/shp/BrickByBrick/src/mocks/players.ts"],"sourcesContent":["import { StatType } from \"../types/enums\";\nimport { Player, StatLog } from \"../types/types\";\n\nconst getDefaultStats = () => {\n    return {\n        [StatType.twoPointsMade]: 0,\n        [StatType.twoPointsMissed]: 0,\n        [StatType.threePointsMade]: 0,\n        [StatType.threePointsMissed]: 0,\n        [StatType.oRebounds]: 0,\n        [StatType.dRebounds]: 0,\n        [StatType.assists]: 0,\n        [StatType.steals]: 0,\n        [StatType.blocks]: 0,\n        [StatType.turnovers]: 0\n    };\n}\n\nconst playerOne = {\n    id: 1,\n    name: \"Sang\",\n    number: \"13\",\n    stats: getDefaultStats(),\n};\n\nconst playerTwo = {\n    id: 2,\n    name: \"Kenny\",\n    number: \"0\",\n    stats: getDefaultStats(),\n};\nconst playerThree = {\n    id: 3,\n    name: \"Bryce\",\n    number: \"11\",\n    stats: getDefaultStats(),\n};\nconst playerFour = {\n    id: 4,\n    name: \"Jeff\",\n    number: \"25\",\n    stats: getDefaultStats(),\n};\nconst playerFive = {\n    id: 5,\n    name: \"Andrew\",\n    number: \"7\",\n    stats: getDefaultStats(),\n};\nconst playerSix = {\n    id: 6,\n    name: \"Rodell\",\n    number: \"15\",\n    stats: getDefaultStats(),\n}\nconst playerSeven = {\n    id: 7,\n    name: \"Mike\",\n    number: \"23\",\n    stats: getDefaultStats(),\n};\nconst playerEight = {\n    id: 8,\n    name: \"Max\",\n    number: \"16\",\n    stats: getDefaultStats(),\n};\nconst playerNine = {\n    id: 9,\n    name: \"Timmy\",\n    number: \"1\",\n    stats: getDefaultStats(),\n};\nconst playerTen = {\n    id: 10,\n    name: \"Kevin\",\n    number: \"00\",\n    stats: getDefaultStats(),\n};\n\n\nconst randomStats = [];\n\n// playerId, statType, time\nfor (let i = 1; i < 11; i++) {\n    for (let type of Object.values(StatType)) {\n        const rand = Math.round(Math.random() * 6);\n        for (let j = 0; j < rand; j++) {\n            let newStat: StatLog = {\n                playerId: i,\n                statType: type,\n                time: (Math.round(Math.random() * 300))\n            }\n\n            randomStats.push(newStat);\n        }\n    }\n}\n\nconst mockPlayers = [\n    playerOne,\n    playerTwo,\n    playerThree,\n    playerFour,\n    playerFive,\n    playerSix,\n    playerSeven,\n    playerEight,\n    playerNine,\n    playerTen\n]\n\nconst playerMap: { [key: number]: Player } = {};\n\nfor (let player of mockPlayers) {\n    playerMap[player.id] = player;\n}\n\nfor (let stat of randomStats) {\n    let curVal = playerMap[stat.playerId].stats[stat.statType] || 0;\n    playerMap[stat.playerId].stats[stat.statType] = curVal + 1;\n}\n\nexport { mockPlayers };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}