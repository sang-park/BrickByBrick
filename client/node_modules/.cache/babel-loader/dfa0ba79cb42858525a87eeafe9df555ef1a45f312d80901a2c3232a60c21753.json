{"ast":null,"code":"var _jsxFileName = \"/Users/shp/BrickByBrick/src/App.tsx\",\n  _s = $RefreshSig$();\nimport './App.scss';\nimport React, { useState } from 'react';\nimport StatButtons from './components/StatButtons';\nimport TeamSetup from './components/TeamSetup';\nimport PlayerStats from './components/PlayerStats';\nimport PlayerSelect from './components/PlayerSelect';\nimport { useTeamLogic } from './hooks/useTeamLogic';\nimport { usePlayerLogic } from './hooks/usePlayerLogic';\nimport { mockTeams } from './mocks/teams';\nimport YoutubeWrapper from './components/YoutubeWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [ytPlayer, setYtPlayer] = useState(null);\n  const [statLog, setStatLog] = useState([]);\n  const {\n    teams,\n    addPlayerToTeam,\n    getTeamScore\n  } = useTeamLogic(mockTeams);\n  const {\n    selectedStat,\n    handleStatSelection,\n    setTeams,\n    setSelectedStat\n  } = usePlayerLogic(teams);\n  const updatePlayerStat = (teamType, playerId) => {\n    // Find the index of the team and player to update the stat\n    const teamIndex = teams.findIndex(team => team.type === teamType);\n    const playerIndex = teams[teamIndex].players.findIndex(player => player.id === playerId);\n    const updatedTeams = [...teams];\n    const player = updatedTeams[teamIndex].players[playerIndex];\n    if (selectedStat) {\n      player.stats[selectedStat] = (player.stats[selectedStat] || 0) + 1;\n    }\n    if (ytPlayer && ytPlayer.current) {\n      const currentTime = ytPlayer.current.getCurrentTime();\n      console.log(currentTime);\n    }\n    setTeams(updatedTeams);\n    setSelectedStat(null); // reset the selected stat after updating\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(TeamSetup, {\n      addPlayerToTeam: addPlayerToTeam\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YoutubeWrapper, {\n      setYtPlayer: setYtPlayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"total points:\", teams.map(team => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [team.type, \": \", getTeamScore(team)]\n      }, team.type, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-select-wrapper\",\n      children: selectedStat ? teams.map(team => /*#__PURE__*/_jsxDEV(PlayerSelect, {\n        team: team,\n        updatePlayerStat: updatePlayerStat\n      }, team.type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(StatButtons, {\n        onStatSelected: handleStatSelection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayerStats, {\n      teams: teams\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"jm1wptDqjw4tcH812NjhYjmU9ZA=\", false, function () {\n  return [useTeamLogic, usePlayerLogic];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","StatButtons","TeamSetup","PlayerStats","PlayerSelect","useTeamLogic","usePlayerLogic","mockTeams","YoutubeWrapper","jsxDEV","_jsxDEV","App","_s","ytPlayer","setYtPlayer","statLog","setStatLog","teams","addPlayerToTeam","getTeamScore","selectedStat","handleStatSelection","setTeams","setSelectedStat","updatePlayerStat","teamType","playerId","teamIndex","findIndex","team","type","playerIndex","players","player","id","updatedTeams","stats","current","currentTime","getCurrentTime","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onStatSelected","_c","$RefreshReg$"],"sources":["/Users/shp/BrickByBrick/src/App.tsx"],"sourcesContent":["import './App.scss';\nimport React, { useState, Ref } from 'react';\nimport VideoPlayer from './components/VideoPlayer';\nimport StatButtons from './components/StatButtons';\nimport TeamSetup from './components/TeamSetup';\nimport PlayerStats from './components/PlayerStats';\nimport PlayerSelect from './components/PlayerSelect';\nimport { useTeamLogic } from './hooks/useTeamLogic';\nimport { usePlayerLogic } from './hooks/usePlayerLogic';\nimport { mockTeams } from './mocks/teams';\nimport YoutubeWrapper from './components/YoutubeWrapper';\nimport { TeamType } from './types/enums';\n\nfunction App() {\n    const [ytPlayer, setYtPlayer] = useState<React.RefObject<any> | null>(null);\n    const [statLog, setStatLog] = useState([]);\n\n    const {\n        teams,\n        addPlayerToTeam,\n        getTeamScore,\n    } = useTeamLogic(mockTeams);\n\n    const {\n        selectedStat,\n        handleStatSelection,\n        setTeams,\n        setSelectedStat,\n    } = usePlayerLogic(teams);\n\n    const updatePlayerStat = (teamType: TeamType, playerId: number) => {\n        // Find the index of the team and player to update the stat\n        const teamIndex = teams.findIndex(team => team.type === teamType);\n        const playerIndex = teams[teamIndex].players.findIndex(player => player.id === playerId);\n\n        const updatedTeams = [...teams];\n        const player = updatedTeams[teamIndex].players[playerIndex];\n\n        if (selectedStat) {\n            player.stats[selectedStat] = (player.stats[selectedStat] || 0) + 1;\n        }\n        if (ytPlayer && ytPlayer.current) {\n            const currentTime = ytPlayer.current.getCurrentTime();\n            console.log(currentTime);\n        }\n\n        setTeams(updatedTeams);\n        setSelectedStat(null); // reset the selected stat after updating\n    };\n\n    return (\n        <div className=\"App\">\n            <TeamSetup addPlayerToTeam={addPlayerToTeam} />\n            <YoutubeWrapper setYtPlayer={setYtPlayer} />\n            <div>\n                total points:\n                {teams.map((team) => (\n                    <div key={team.type}>\n                        {team.type}: {getTeamScore(team)}\n                    </div>\n                ))}\n            </div>\n            <div className=\"player-select-wrapper\">\n                {selectedStat ? (\n                    teams.map((team) => (\n                        <PlayerSelect key={team.type} team={team} updatePlayerStat={updatePlayerStat} />\n                    ))\n                ) : (\n                    <StatButtons onStatSelected={handleStatSelection} />\n                )}\n            </div>\n\n            <PlayerStats teams={teams} />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}